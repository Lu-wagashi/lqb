//1到N块饼干，其中共有种M饼干，每块饼干有对应的重量a[i]，对应的种类b[i]，从中选取若干块饼干 	
//要求1：选取饼干的重量和不超过背包重量c ；要求2：M种饼干均选到
//5 3 20 8 5 7 7 3 3 2 2 1 3
//示例：	5 3 20 
//饼干序数i=0 1 2 3 4 
//各块重量：8 5 7 7 3
//各块种类：3 2 2 1 3, 最大重量输出=7+5+8=20 （第0块、第1块、第3块) 

#include<bits/stdc++.h>
using namespace std;
const int maxn =1000;
const int maxm =20;
int n,m,c,a[maxn],b[maxm],hashtable[maxn]; 		//a[i]记录第i块饼干的重量，b[i]记录第i块饼干的种类 
int sum,kind,bg[maxn],maxvalue;		//kind记录总种类数,bg[i]记录第i种饼干被选到的个数,maxvalue记录最佳方案的质量 
void binggang(int index)			//当前选入第index块饼干,sum记录当前选取饼干的总和,
{ 
	if(sum>c|| index>n) 
		return;					//边界1:总和大于1
	if(index==n || sum==c)				//边界2:访问完n块饼干 或者总和刚好等于c 
	{
		kind=0;
		for(int i=1;i<=m;i++)			//统计饼干出现的种类数 
		{
			if(bg[i]!=0)	kind ++; //改为bg[i]==1，即为每种饼干只取一种
		}
		if(kind==m)	maxvalue=max(maxvalue,sum);
		return;
	}
	//总重小于c，可以继续往下搜索	
	kind=0; 
	for(int i=1;i<=m;i++)		//统计饼干出现的种类数 
	{
		if(bg[i]!=0)	kind ++; 
	}
	if(kind==m)	
		maxvalue=max(maxvalue,sum);
	for(int i=0;i<n;i++) 	
	{
		if(hashtable[i]==false)
		{
			hashtable[i]=true;
			index=i;
			bg[b[index]]++;		//第index块饼干的种类加1
			sum+=a[index];
			dfs(index+1);//选第index块饼干，之前选取的重量和 加上该块饼干质量
			hashtable[i]=false;	
			sum-=a[index];
			bg[b[index]]--;		//第index饼干的种类加1
		}
	}
}

int main()
{
	/*scanf("%d%d%d",&n,&m,&c);
	for(int i=0;i<n;i++) scanf("%d",&a[i]);
	for(int i=0;i<n;i++) scanf("%d",&b[i]);
	*/
	n=5;m=3;c=50;
	a[0]=10;a[1]=3;a[2]=23;a[3]=13;a[4]=21;
	b[0]=1;b[1]=2;b[2]=2;b[3]=1;b[4]=3;
	binggang(0);
	cout<<maxvalue; 
	return 0;
 } 
